package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

import com.example.jdbcdemo.domain.Person;

public class PersonManagerJDBC implements PersonManager{

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableDevice = "CREATE TABLE Device(id bigint GENERATED BY DEFAULT AS IDENTITY, deviceName varchar(40), screenSize double, dateOfRelease date)";

	private PreparedStatement addDeviceStmt;
	private PreparedStatement deleteAllDevicesStmt;
	private PreparedStatement getAllDevicesStmt;

	private Statement statement;

	public PersonManagerJDBC() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Device".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableDevice);

			addDeviceStmt = connection
					.prepareStatement("INSERT INTO Device (deviceName, screenSize, dateOfRelease) VALUES (?, ?, ?)");
			deleteAllDevicesStmt = connection
					.prepareStatement("DELETE FROM Device");
			getAllDevicesStmt = connection
					.prepareStatement("SELECT id, deviceName, screenSize, dateOfRelease FROM Device");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	void clearPersons() {
		try {
			deleteAllDevicesStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public int addPerson(Person person) {
		int count = 0;
		Calendar dateOfRelease = prepDate(person);
		try {
			addDeviceStmt.setString(1, person.getDeviceName());
			addDeviceStmt.setDouble(2, person.getScreenSize());
			addDeviceStmt.setDate(3, new java.sql.Date(dateOfRelease.getTimeInMillis()));

			count = addDeviceStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	@Override
	public List<Person> getAllPersons() {
		List<Person> persons = new ArrayList<Person>();

		try {
			ResultSet rs = getAllDevicesStmt.executeQuery();

			while (rs.next()) {
				Person p = new Person();
				p.setId(rs.getInt("id"));
				p.setDeviceName(rs.getString("deviceName"));
				p.setScreenSize(rs.getDouble("screenSize"));
				p.setDateOfRelease(rs.getDate("dateOfRelease").toString());
				persons.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return persons;
	}

	private Calendar prepDate(Person person){

		Calendar dateOfRelease = new GregorianCalendar();

		dateOfRelease.set(Calendar.YEAR, person.getYearOfRelease());
		dateOfRelease.set(Calendar.MONTH, person.getMonthOfRelease());
		dateOfRelease.set(Calendar.DAY_OF_MONTH, person.getDayOfRelease());

		return dateOfRelease;
	}

}
